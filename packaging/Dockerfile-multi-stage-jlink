# Because JLink provides binaries for the final container, Linux flavors and Java versions in both stages must match

## Stage 1 : Gradle build produces the application executable jar and custom JRE
FROM openjdk:17-jdk-alpine AS jlinker

# Copy local source
WORKDIR /stella
COPY . /stella
RUN mv src/main/java/module-info.java.disabled src/main/java/module-info.java

# Build jar and use JLink to create new distilled JRE
RUN apk --no-cache add binutils
RUN ./gradlew jar jlink --build-file build-jlink.gradle


## Stage 2 : Final image populated with custom JRE and application executable jar
FROM alpine:latest

ENV JAVA_MINIMAL=/opt/jre
ENV PATH="$PATH:$JAVA_MINIMAL/bin"

# Copy distilled JRE generated by JLink
COPY --from=jlinker /stella/build/image "$JAVA_MINIMAL"/

# Copy application as executable jar
COPY --from=jlinker /stella/build/libs/stella-0.0.1-SNAPSHOT.jar stella.jar

# Run application using executable jar application 
CMD ["java", "-jar", "stella.jar"]
